<script type="text/javascript" src="#libraryLink('js/jquery-1.1.2.js')">
</script>
<script type="text/javascript" language="JavaScript">
	<!--
	var DOT = "$DOT";
	function submitform(id)
	{
		var theForm = document.getElementById(id);
		if(theForm && theForm.onsubmit)
		{
			theForm.onsubmit();
		}
		if(theForm && theForm.submit)
		{
			theForm.submit();
		}
	}
	function openSampleCopyrightWindow() 
	{ 
	  window.open("$copyright_alert_url","SampleCopyrightAlert","scrollbars=no,menubar=no,height=400,width=700,resizable=no,toolbar=no,location=no,status=no");
	  return false;
	}
	function attachEventHandlers()
	{
		for(var i = 0; i < document.links.length; i++)
		{
			var link = document.links[i];
			if(link.id)
			{
				if(link.id.match(/^propsTrigger${DOT}\d+$/))
				{
					if(link.attachEvent)
					{
						link.attachEvent("onclick", togglePropertiesDiv);
					}
					else if(link.addEventListener)
					{
						link.addEventListener("click", togglePropertiesDiv, true);
					}
				}
				else if(link.id.match(/^removeTrigger${DOT}\d+$/))
				{
					if(link.attachEvent)
					{
						link.attachEvent("onclick", handleRemoveFileItem);
					}
					else if(link.addEventListener)
					{
						link.addEventListener("click", handleRemoveFileItem, true);
					}
				}
			}
		}
		var hasDisplayNameTag = false;
		var inputTags = document.getElementsByTagName("input");
		for(var i = 0; i < inputTags.length && ! hasDisplayNameTag; i++)
		{
			var tag = inputTags[i];
			if(tag.id && tag.id.match(/^displayName${DOT}\d+$/))
			{
				hasDisplayNameTag = true;
			}
		}
		for(var i = 0; i < inputTags.length; i++)
		{
			var tag = inputTags[i];
			if(tag.id && hasDisplayNameTag && tag.id.match(/^content${DOT}\d+$/))
			{
				if(tag.attachEvent)
				{
					tag.attachEvent("onchange", seedDisplayNameValue);
				}
				else if(tag.addEventListener)
				{
					tag.addEventListener("change", seedDisplayNameValue, true);
				}
			}
			else if(tag.id && tag.id.match(/^copyright${DOT}\d+$/))
			{
				if(tag.attachEvent)
				{
					tag.attachEvent("onchange", handleCopyrightChange);
				}
				else if(tag.addEventListener)
				{
					tag.addEventListener("change", handleCopyrightChange, true);
				}
			}
			else if(tag.id && tag.id.match(/^changeMimetype${DOT}\d+$/))
			{
				if(tag.attachEvent)
				{
					tag.attachEvent("onclick", handleMimetypeChange);
				}
				else if(tag.addEventListener)
				{
					tag.addEventListener("click", handleMimetypeChange, true);
				}
			}
			else if(tag.id && tag.id.match(/^mime_category${DOT}\d+$/))
			{
				if(tag.attachEvent)
				{
					tag.attachEvent("onchange", handleMimeCategoryChange);
				}
				else if(tag.addEventListener)
				{
					tag.addEventListener("change", handleMimeCategoryChange, true);
				}
			}
		}
		
		var selectTags = document.getElementsByTagName("select");
		for(var i = 0; i < selectTags.length; i++)
		{
			var tag = selectTags[i];
			if(tag.id && tag.id.match(/^mime_category${DOT}\d+$/))
			{
				if(tag.attachEvent)
				{
					tag.attachEvent("onchange", handleMimeCategoryChange);
				}
				else if(tag.addEventListener)
				{
					tag.addEventListener("change", handleMimeCategoryChange, true);
				}
			}
		}
		
	}
	function handleEnterKey (field, event) 
	{
		var keyCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;
		if (keyCode == 13) 
		{
			return false;
		} 
		else
		{
			return true;
		}
	}      
	function handleCopyrightChange(evt)
	{
		evt = (evt) ? evt : ((event) ? event : null);
		if(evt)
		{
			evt.cancelBubble = true;
			var element = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null)
			if(element)
			{
				//element = (element.nodeType == 1 || element.nodeType == 9) ? element : element.parentNode;
				element = (element.id && element.id.lastIndexOf(DOT) >= 0) ? element : element.parentNode;
				
				var dot = element.id.lastIndexOf("$DOT");
				if(dot >= 0)
				{
					var index = element.id.substr(dot + 1);
					updateCopyright(index);
				}
			}
		}
	}
	function handleMimeCategoryChange(evt)
	{
		evt = (evt) ? evt : ((event) ? event : null);
		if(evt)
		{
			evt.cancelBubble = true;
			var element = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null)
			if(element)
			{
				element = (element.id && element.id.lastIndexOf(DOT) >= 0) ? element : element.parentNode;
				
				var dot = element.id.lastIndexOf("$DOT");
				if(dot >= 0)
				{
					var index = element.id.substr(dot + 1);
					changeMimeCategory(index);
				}
			}
		}
	}
	function handleMimetypeChange(evt)
	{
		evt = (evt) ? evt : ((event) ? event : null);
		if(evt)
		{
			evt.cancelBubble = true;
			var element = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null)
			if(element)
			{
				element = (element.id && element.id.lastIndexOf(DOT) >= 0) ? element : element.parentNode;
				
				var dot = element.id.lastIndexOf("$DOT");
				if(dot >= 0)
				{
					var index = element.id.substr(dot + 1);
					changeMimeType(index);
				}
			}
		}
	}
	function handleRemoveFileItem(evt)
	{
		evt = (evt) ? evt : ((event) ? event : null);
		if(evt)
		{
			var elem = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null)
			if(elem)
			{
				elem = (elem.nodeType == 1 || elem.nodeType == 9) ? elem : elem.parentNode;
				deleteFileItem(elem);
			}
		}
	}
	function togglePropertiesDiv(evt)
	{
		evt = (evt) ? evt : ((event) ? event : null);
		if(evt)
		{
			evt.cancelBubble = true;
			var elem = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null)
			if(elem)
			{
				elem = (elem.nodeType == 1 || elem.nodeType == 9) ? elem : elem.parentNode;
				
				toggleProperties(elem);
			}
		}
	}
	function seedDisplayNameValue(evt)
	{
		evt = (evt) ? evt : ((event) ? event : null);
		if(evt)
		{
			evt.cancelBubble = true;
			var element = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null)
			if(element)
			{
				//element = (element.nodeType == 1 || element.nodeType == 9) ? element : element.parentNode;
				element = (element.id && element.id.lastIndexOf(DOT) >= 0) ? element : element.parentNode;
				
				var dot = element.id.lastIndexOf("$DOT");
				var index = element.id.substr(dot + 1);
				var src_node = document.getElementById("content$DOT" + index);
				var target_node = document.getElementById("displayName$DOT" + index);
				if(src_node && target_node)
				{
					var trim = false;
					if(src_node.type == "file")
					{
						trim = true;
					}
					seedValue(src_node,target_node,trim);
				}
			}
		}
	}
	function addFileInput()
	{
//alert("addFileInput");
		var counter = document.getElementById("fileCount");
		var indexer = document.getElementById("lastIndex");
		var fileInputDiv = document.getElementById("fileInputDiv");
		var count = new Number(counter.value) + 1;
		counter.value = count;
		var prevIndex = indexer.value;
		var index = new Number(indexer.value) + 1;
		indexer.value = index;

		var modelContentDiv = document.getElementById("contentDiv$DOT" + prevIndex);
		if(modelContentDiv)
		{
			var newContentDiv = deepCopy(modelContentDiv, index);
			fileInputDiv.appendChild(newContentDiv);
		}
		
		var modelPropertiesDiv = document.getElementById("propertiesDiv$DOT" + prevIndex);
		if(modelPropertiesDiv)
		{
			var newPropertiesDiv = deepCopy(modelPropertiesDiv, index);
			newPropertiesDiv.style.display = "none";
			fileInputDiv.appendChild(newPropertiesDiv);
			var addDetailsLink = document.getElementById("propsTrigger${DOT}" + index);
			if(addDetailsLink)
			{
				removeTextNodes(addDetailsLink);
				var newText = document.createTextNode("$tlang.getString("edit.show")");
				addDetailsLink.appendChild(newText);
			}
		}
		
		var prevNext = document.getElementById("next$DOT" + prevIndex);
		if(prevNext)
		{
			prevNext.value = index;
		}
		
		var thisPrev = document.getElementById("prev$DOT" + index);
		if(thisPrev)
		{
			thisPrev.value = prevIndex;
		}
		
		attachEventHandlers();
		
		resizeFrame('grow');
		focus_path = [ "content" + DOT + index ];
		setFocus(focus_path);
	}
	function removeFileItem(index)
	{
		var fileInputDiv = document.getElementById("fileInputDiv");
		var prev = document.getElementById("prev$DOT" + index);
		var next = document.getElementById("next$DOT" + index);
		
		if(prev && next )
		{
			if(prev.value && prev.value != "")
			{
				if(next.value && next.value != "")
				{
					var nextPrev = document.getElementById("prev$DOT" + next.value);
					if(nextPrev)
					{
						nextPrev.value = prev.value;
					}
					var prevNext = document.getElementById("next$DOT" + prev.value);
					if(prevNext)
					{
						prevNext.value = next.value;
					}
				}
				else
				{
					var prevNext = document.getElementById("next$DOT" + prev.value);
					if(prevNext)
					{
						prevNext.value = "";
					}
				}
			}
			else
			{
				if(next.value && next.value != "")
				{
					var nextPrev = document.getElementById("prev$DOT" + next.value);
					if(nextPrev)
					{
						nextPrev.value = "";
					}
				}
				else
				{
					// can't delete
					return;
				}
			}
		}
		else
		{
			// can't delete
			return;
		}
		
		var counter = document.getElementById("fileCount");
		var count = new Number(counter.value) - 1;
		counter.value = count;

		var indexer = document.getElementById("lastIndex");
		if(index == indexer.value)
		{
			indexer.value = prev.value;
		}
		
		var fileInputDiv = document.getElementById("fileInputDiv");
		
		var contentDiv = document.getElementById("contentDiv$DOT" + index);
		if(contentDiv)
		{
			removeTree(contentDiv);
			fileInputDiv.removeChild(contentDiv);
		}
		var propertiesDiv = document.getElementById("propertiesDiv$DOT" + index);
		if(propertiesDiv)
		{
			removeTree(propertiesDiv);
			fileInputDiv.removeChild(propertiesDiv);
		}
		
		resizeFrame('grow');
	}
	function removeTree(nodeRef)
	{
		if(nodeRef && nodeRef.childNodes && nodeRef.childNodes.length && nodeRef.childNodes.length > 0)
		{
			for(var i = 0; i < nodeRef.childNodes.length; i++)
			{
				removeTree(nodeRef.childNodes[i]);
				nodeRef.removeChild(nodeRef.childNodes[i]);
			}
		}
	}
	function deleteFileItem(element)
	{
		if(element && element.id)
		{
			var dot = element.id.lastIndexOf("$DOT");
			if(dot >= 0)
			{
				var index = element.id.substr(dot + 1);
				removeFileItem(index);
			}
		}
		else if(element.parentNode != null && element.parentNode != element)
		{
			deleteFileItem(element.parentNode);
		}
	}
	function toggleProperties(element)
	{
		if(element)
		{
			if(element.id)
			{
				var dot = element.id.lastIndexOf("$DOT");
				if(dot >= 0)
				{
					var index = element.id.substr(dot + 1);
					showHide(element, index);
				}
			}
		}
	}
	function showHide(element, index)
	{
		var propertiesDiv = document.getElementById("propertiesDiv$DOT" + index);
		
		if(propertiesDiv)
		{
			var display = propertiesDiv.style.display;
			if(display && display == "none")
			{
				propertiesDiv.style.display = "block";
				removeTextNodes(element);
				var newText = document.createTextNode("$tlang.getString("edit.hide")");
				element.appendChild(newText);
				focus_path = [ "content$DOT" + index ];
			}
			else
			{
				propertiesDiv.style.display = "none";
				removeTextNodes(element);
				var newText = document.createTextNode("$tlang.getString("edit.show")");
				element.appendChild(newText);
				focus_path = [ "description$DOT" + index ];
			}
			resizeFrame('grow');
			setFocus(focus_path);
		}
	}
	function removeTextNodes(element)
	{
		for(var i = element.childNodes.length - 1; i >= 0; i--)
		{
			if(element.childNodes[i].nodeType == 3 || element.childNodes[i].nodeType == 4)
			{
				element.removeChild(element.childNodes[i]);
			}
		}
	}
	function deepCopy(element, index)
	{
		var newElement = element.cloneNode(false);
		if(newElement && newElement.id)
		{
			if(element.id.match(/^displayName${DOT}\d+$/))
			{
				newElement.value = "";
			}
			else if(element.id.match(/^content${DOT}\d+$/))
			{
				newElement = document.createElement(element.tagName);
				for(var a = 0; a < element.attributes.length; a++)
				{
					if(element.attributes[a].name == "value" || element.attributes[a].name == "type")
					{
						// skip
					}
					else 
					{
						try
						{
							newElement.setAttributeNode(element.attributes[a]);
						}
						catch(e)
						{
							// ignore
						}
					}
				}
				if(element.type !== null && element.type != newElement.type)
				{
					try
					{
						newElement.setAttribute("type", element.type);
					}
					catch(e)
					{
						// ignore
					}
				}
			}
			else if(element.id.match(/^hidden_true${DOT}\d+$/))
			{
				newElement.checked = false;
			}
			else if(element.id.match(/^hidden_false${DOT}\d+$/))
			{
				newElement.checked = true;
			}
			else if(element.id.match(/^use_start_date${DOT}\d+$/))
			{
				newElement.checked = false;
			}
			else if(element.id.match(/^use_end_date${DOT}\d+$/))
			{
				newElement.checked = false;
			}
			var dotPos = element.id.lastIndexOf(DOT);
			if(dotPos >= 0)
			{
				var baseName = element.id.substr(0,dotPos);
				newElement.setAttribute("id", baseName + DOT + index);
				newElement.setAttribute("name", baseName + DOT + index);
			}
		}
		if(newElement && newElement.htmlFor)
		{
			var dotPos = newElement.htmlFor.lastIndexOf(DOT);
			if(dotPos >= 0)
			{
				var baseName = newElement.htmlFor.substr(0,dotPos);
				newElement.htmlFor = baseName + DOT + index;
			}
		}
		if(newElement && element.childNodes)
		{
			for(var i = 0; i < element.childNodes.length; i++)
			{
				var newChild = deepCopy(element.childNodes[i], index);
				newElement.appendChild(newChild);
			}
		}
		
		return newElement
	}
	function seedValue(src_element, target_element, trim)
	{
		if(target_element && src_element && src_element.value)
		{
			var nonWhitespaceChar = /\S/;
			if(target_element.value.search(nonWhitespaceChar))
			{
				var displayName = src_element.value;
				if(trim)
				{
					var delimiters = new Array('/', '\\', ':');
					
					for(var i = 0; i < delimiters.length; i++)
					{
						var delimiter = delimiters[i];
						if(displayName.lastIndexOf(delimiter) > -1)
						{
							displayName = displayName.substring(displayName.lastIndexOf(delimiter) + 1);
						}
					}
				}
				target_element.value = displayName;
			}
			target_element.focus();
			target_element.select();
		}
	}
	function updateCopyright(index)
	{
		var selectElement = document.getElementById("copyright${DOT}" + index );
		if(selectElement && selectElement.value)
		{
			var selection = selectElement.value;
			if(selection == "${USE_THIS_COPYRIGHT}")
			{
				var copyrightDiv = document.getElementById("copyright_status${DOT}" + index );
				if(copyrightDiv)
				{
					copyrightDiv.style.display="block";
					resizeFrame('grow');
					focus_path = [ "newcopyright${DOT}" + index ];
					setFocus(focus_path);
				}
				else
				{
					copyrightDiv.style.display="none";
				}
			}
		}
		
	}
	function changeMimeType(index)
	{
		var categoryElement = document.getElementById('mime_category' + DOT + index);
		var category = categoryElement.value;
		var subtypeElement = document.getElementById('mime_subtype' + DOT + index);
		var subtype = subtypeElement.value;
		var mime_widget_div = document.getElementById('mime_widget' + DOT + index);
		
		var select_category = document.createElement('select');
		select_category.setAttribute('name', 'mime_category' + DOT + index);
		select_category.setAttribute('id', 'mime_category' + DOT + index);
		for(var i = 0; i < mimeCategories.length; i++)
		{
			var option_category = document.createElement('option');
			option_category.text = mimeCategories[i];
			option_category.value = mimeCategories[i];
			if(category == mimeCategories[i])
			{
				option_category.setAttribute('selected',true);				
			}
			select_category.appendChild(option_category);
		}

		var slash = document.createTextNode(" / ");
				
		var select_subtype = document.createElement('select');
		select_subtype.setAttribute('name','mime_subtype' + DOT + index);
		select_subtype.setAttribute('id','mime_subtype' + DOT + index);
		
		for(var i = 0; i < mimeSubtypes[category].length; i++)
		{
			var option_subtype = document.createElement('option');
			option_subtype.text = mimeSubtypes[category][i];
			option_subtype.value = mimeSubtypes[category][i];
			if(subtype == mimeSubtypes[category][i])
			{
				option_subtype.setAttribute('selected',true);		
			}
			select_subtype.appendChild(option_subtype);
		}
		
		var children = mime_widget_div.childNodes;
		for(var i = children.length - 1; i >= 0; i--)
		{
			mime_widget_div.removeChild(children[i]);
		}

		mime_widget_div.appendChild(select_category);
		mime_widget_div.appendChild(slash);
		mime_widget_div.appendChild(select_subtype);
		
		if(select_category.attachEvent)
		{
			select_category.attachEvent("onchange", handleMimeCategoryChange);
		}
		else if(select_category.addEventListener)
		{
			select_category.addEventListener("change", handleMimeCategoryChange, true);
		}
		
	}
	function changeMimeCategory(index)
	{
		var mime_warning_div = document.getElementById("mime_warning" + DOT + index);
		var select_category = document.getElementById("mime_category" + DOT + index);
		var select_subtype = document.getElementById("mime_subtype" + DOT + index);
		var category = select_category.options[select_category.selectedIndex].text;
		var children = select_subtype.childNodes;
		for(var i = children.length - 1; i >= 0; i--)
		{
			select_subtype.removeChild(children[i]);
		}

		for(var i = 0; i < mimeSubtypes[category].length; i++)
		{
			var option_subtype = document.createElement('option');
			option_subtype.text = mimeSubtypes[category][i];
			option_subtype.value = mimeSubtypes[category][i];
			if(i == 0)
			{
				option_subtype.setAttribute('selected',true);			
			}
			select_subtype.appendChild(option_subtype);
		}
		
		if(category == "text")
		{
			mime_warning_div.setAttribute("className", "alertMessage");
			mime_warning_div.setAttribute("class", "alertMessage");
			mime_warning_div.innerHTML = "$tlang.getString("mime.alert")";
		}
		else
		{
			mime_warning_div.setAttribute("className", "");
			mime_warning_div.setAttribute("class", "");
			mime_warning_div.innerHTML = "";
		}
	}

	//this function needs jquery 1.1.2 or later - it resizes the parent iframe without bringing the scroll to the top
	function resizeFrame(updown) 
	{
		var frame = parent.document.getElementById( window.name );
	
		if( frame ) 
		{
			if(updown=='shrink')
			{
				var clientH = document.body.clientHeight - 30;
			}
			else
			{
				var clientH = document.body.clientHeight + 30;
			}
			$( frame ).height( clientH );
		} 
		else 
		{
			throw( "resizeFrame did not get the frame (using name=" + window.name + ")" );
		}
	}
	
	attachEventHandlers();
-->
</script>

