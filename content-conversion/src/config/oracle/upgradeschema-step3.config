# UpgradeSchema Control File (Default) for Step 3
# Converts CONTENT_RESOURCE_DELETE table
dbDriver=oracle.jdbc.driver.OracleDriver

# Conversion needs the database connection details
dbURL=PUT_YOUR_URL_HERE
dbUser=PUT_YOUR_USERNAME_HERE
dbPass=PUT_YOUR_PASSWORD_HERE

## select one conversion for content_resource_delete table (or none)
## FileSizeResourcesConversion adds and populates columns for the new quota query and the resource-type query (used by OSP)
## Type1BlobResourceConversion does all of that plus switching from XML serialization to binary-entity serialization

#convert.0=FileSizeResourcesConversion
#convert.0.handler.class=org.sakaiproject.content.impl.serialize.impl.conversion.FileSizeResourcesConversionHandler
#convert.0.create.migrate.table.count=3
#convert.0.create.migrate.table.0=create table CONTENT_DEL_FSREGISTER ( id varchar2(1024), status varchar2(99) )
#convert.0.create.migrate.table.1=create unique index CONTENT_DEL_FSREGISTER_id_idx on CONTENT_DEL_FSREGISTER(id)
#convert.0.create.migrate.table.2=create index CONTENT_DEL_FSREGISTER_st_idx on CONTENT_DEL_FSREGISTER(status)
#convert.0.drop.migrate.table=drop table CONTENT_DEL_FSREGISTER
#convert.0.check.migrate.table=select count(*) from CONTENT_DEL_FSREGISTER where status <> 'done'
#convert.0.select.next.batch=select id from CONTENT_DEL_FSREGISTER where status = 'pending' and rownum <= 100
#convert.0.complete.next.batch=update CONTENT_DEL_FSREGISTER set status = 'done' where id = ?
#convert.0.mark.next.batch=update CONTENT_DEL_FSREGISTER set status = 'locked' where id = ?
#convert.0.populate.migrate.table=insert into CONTENT_DEL_FSREGISTER (id,status) select RESOURCE_ID, 'pending' from CONTENT_RESOURCE_DELETE where resource_id not in (select id from CONTENT_DEL_FSREGISTER)
#convert.0.select.record=select XML from CONTENT_RESOURCE_DELETE where RESOURCE_ID = ?
#convert.0.select.validate.record=select XML from CONTENT_RESOURCE_DELETE where RESOURCE_ID = ?
#convert.0.update.record=update CONTENT_RESOURCE_DELETE set CONTEXT = ?, FILE_SIZE = ?, RESOURCE_TYPE_ID = ? where RESOURCE_ID = ? 
#convert.0.new.columns.names=CONTEXT,FILE_SIZE,RESOURCE_TYPE_ID
#convert.0.new.columns.types=VARCHAR2(99), NUMBER(18), VARCHAR2(255)
#convert.0.new.columns.qualifiers=default null, default null, default null
#convert.0.new.columns.add=alter table CONTENT_RESOURCE_DELETE add <name> <type> <qualifier>
#convert.0.new.columns.test=select column_name from user_tab_columns where table_name = 'CONTENT_RESOURCE_DELETE' and column_name = '<name>'
#convert.0.create.error.table=create table CONTENT_CONVERSION_ERRORS ( entity_id VARCHAR2(255), conversion VARCHAR2(255), error_description VARCHAR2(1024), report_time TIMESTAMP default LOCALTIMESTAMP )
#convert.0.report.error=insert into CONTENT_CONVERSION_ERRORS (entity_id,conversion,error_description) values (?,?,?)
#convert.0.verify.error.table=select column_name from user_tab_columns where table_name = 'CONTENT_CONVERSION_ERRORS'
#convert.0.early.termination.signal=quit.txt

convert.0=Type1BlobResourceConversion
convert.0.handler.class=org.sakaiproject.content.impl.serialize.impl.conversion.Type1BlobResourcesConversionHandler
convert.0.create.migrate.table.count=3
convert.0.create.migrate.table.0=create table CONTENT_DEL_T1REGISTER ( id varchar2(1024), status varchar2(99) )
convert.0.create.migrate.table.1=create index CONTENT_DEL_T1REGISTER_id_idx on CONTENT_DEL_T1REGISTER(id)
convert.0.create.migrate.table.2=create index CONTENT_DEL_T1REGISTER_st_idx on CONTENT_DEL_T1REGISTER(status)
convert.0.drop.migrate.table.count=2
convert.0.drop.migrate.table.0=drop table CONTENT_DEL_T1REGISTER
convert.0.drop.migrate.table.1=update CONTENT_RESOURCE_DELETE set XML = NULL where BINARY_ENTITY is not NULL
convert.0.check.migrate.table=select count(*) from CONTENT_DEL_T1REGISTER  where status <> 'done'
convert.0.select.next.batch=select id from CONTENT_DEL_T1REGISTER where status = 'pending' and rownum <= 100
convert.0.complete.next.batch=update CONTENT_DEL_T1REGISTER set status = 'done' where id = ?
convert.0.mark.next.batch=update CONTENT_DEL_T1REGISTER set status = 'locked' where id = ?
convert.0.populate.migrate.table=insert into CONTENT_DEL_T1REGISTER (id,status) select RESOURCE_ID, 'pending' from CONTENT_RESOURCE_DELETE where BINARY_ENTITY is NULL and XML is not null and resource_id not in (select id from CONTENT_DEL_T1REGISTER)
convert.0.select.record=select XML from CONTENT_RESOURCE_DELETE where RESOURCE_ID = ?
convert.0.select.validate.record=select BINARY_ENTITY from CONTENT_RESOURCE_DELETE where RESOURCE_ID = ?
convert.0.update.record=update CONTENT_RESOURCE_DELETE set CONTEXT = ?, FILE_SIZE = ?, BINARY_ENTITY = ?, RESOURCE_TYPE_ID = ? where RESOURCE_ID = ? 
convert.0.new.columns.names=CONTEXT,FILE_SIZE,RESOURCE_TYPE_ID,BINARY_ENTITY
convert.0.new.columns.types=VARCHAR2(99),NUMBER(18),VARCHAR2(255),BLOB
convert.0.new.columns.qualifiers=default null,default null,default null,default null  
convert.0.new.columns.add=alter table CONTENT_RESOURCE_DELETE add <name> <type> <qualifier>
convert.0.new.columns.test=select column_name from user_tab_columns where table_name = 'CONTENT_RESOURCE_DELETE' and column_name = '<name>'
convert.0.create.error.table=create table CONTENT_CONVERSION_ERRORS ( entity_id VARCHAR2(255), conversion VARCHAR2(255), error_description VARCHAR2(1024), report_time TIMESTAMP default LOCALTIMESTAMP )
convert.0.report.error=insert into CONTENT_CONVERSION_ERRORS (entity_id,conversion,error_description) values (?,?,?)
convert.0.verify.error.table=select column_name from user_tab_columns where table_name = 'CONTENT_CONVERSION_ERRORS'
convert.0.early.termination.signal=quit.txt
